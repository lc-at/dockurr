#!/usr/bin/bash

# This script will run all services/workers for dockurr
# FOR TESTING/DEVELOPMENT ONLY

main() {
        print_banner
        flask createdb

        LEVEL=DEBUG
        if [ -z "$DEBUG" ]; then
                LEVEL=INFO
        fi


        run_command flask 125 \
                flask run --debug
        run_command celery-worker 130 \
                celery \
                -A dockurr.make_celery worker \
                -l $LEVEL
        run_command celery-beat 131 \
                celery \
                -A dockurr.make_celery beat \
                -S redbeat.RedBeatScheduler \
                -l $LEVEL

        trap handle_int SIGINT
        while [ $childs_exited = 0 ]; do
                wait_for_childs
        done
        trap - SIGINT
        wait_for_childs
}

int_count=0
childs_exited=0
child_pids=()

wait_for_childs() {
        for pid in "${child_pids[@]}"; do
                wait "$pid"
        done
        childs_exited=1
}

kill_childs() {
        for pid in "${child_pids[@]}"; do
                kill "$1" "$pid" &>/dev/null
        done
}

handle_int() {
        echo "Caught SIGINT, killing all processes... press ^C again to force kill"
        int_count=$((int_count + 1))
        if [ "$int_count" -gt 1 ]; then
                echo "Caught SIGINT twice, sending SIGKILL to all childs..."
                kill_childs -KILL
                childs_exited=1
        fi
        kill_childs -TERM
}


run_command() {
        local prefix=$1
        local color=$2
        shift 2

        setsid "$@" &> >(add_prefix "$prefix" "$color") &
        child_pids+=("$!")
}

_tput() {
        if command -v tput > /dev/null; then
                tput "$@"
        fi
}

add_prefix() {  # usage: add_prefix name color
        prefix="$(_tput sgr0)"
        prefix="$prefix$(_tput setab "$2")"
        prefix="$prefix$(_tput bold)"
        suffix="$(_tput sgr0)"
        setsid sed "s/^/$prefix$1$suffix: /"
}

print_banner() {
        # credits to this guy: https://gist.github.com/dhrp/5733652
        tput setaf green
        tput bold
        cat <<EOF
  _______
< dockurr >
  -------
      \           ##        .           
       \      ## ## ##       ==           
        \  ## ## ## ##      ===          
       /""""""""""""""""\___/ ===       
  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~ 
       \______ o          __/            
         \    \        __/             
          \____\______/                

EOF
        tput sgr0
}

main
